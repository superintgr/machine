agent structure:
  .. base model : <gemini-flash>
  .. core model : <gemini-pro>

instances will use two kinds of generative policies (completetion <- prompt, function operator -> spectrum operator)

function operator:
  .. function space : all possible variable P[i] for X[i] different positional components.
  .. state vector : there is another instances of (P, X) for f : (p, x) -> (p, -x)
such that P[j] has another set of position X[j] defined on that spectrum.

[spectrum operator]
  .. state space : the measurement space of X[*] where * indicates a particular observable quantity for all P[i], ..., P[j] that maps any (i, *) -> (*, -i) -> (*, j)
  .. state vector : evolves in a way that keeps i * i = j * j = k * k = 1 * 1 as unitary transformation type.

agent training:
  .. suppose f : (x, state) -> X
  .. f contains all {x[0], ..., x[N]} in its spectrum
  .. measuring X(t) at any position would result in output from that distribution always

  .. there is another set of variables that define f(X(t)) within that same spectrum
  .. the spectrum would contain all {f(x[0]), ..., f(x[N])}, says QM.

  .. finding the function f could solve for the eigenvector and eigenvalue whenever X(t) could be measured.
  .. given the register used for X(t), relabel the register to measure f(X(t)).
